import Foundation

// 1. Array
var str_array: [String] = ["An"]
let int_array: [Int] = [1, 2, 3, 4, 5]

// Creating an Empty Array
var someInts: [Int] = []

// Creating an Array with a Default Value
var someInts2: [Int] = [1, 2, 3]
var threeDoubles = Array(repeating: 5, count: 3)
print(threeDoubles)

var sixDoubles = threeDoubles + someInts2
print(sixDoubles)

// Accessing and Modifying an Array
print("The str_array list contains \(str_array.count) items.")

if str_array.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list isn't empty.")
}

//str_array.append("Tien")
str_array += ["Tien", "Quoc", "Trung", "Yen", "Trang"]
print(str_array)

print(str_array[2])

print(str_array[0...2])
print(str_array[0..<2])
print(str_array[..<2])
print(str_array[2...])

str_array.reverse()
str_array.insert("ABC", at: 1)
str_array.remove(at: 1)
print(str_array)

print(str_array.first)
print(str_array.last)

let a = str_array.firstIndex(of: "Quoc")

str_array.removeLast()
print(str_array)

// Iterating Over an Array
for item in str_array {
    print(item)
}

for (index, value) in str_array.enumerated() {
    print("Item \(index + 1): \(value)")
}

//let dictionnary: [String: Any] = ["name": "An", "age": 23]

// 2. Set
// Creating and Initializing an Empty Set
var letters = Set<Character>()
print("letters is of type Set<Character> with \(letters.count) items.")

// Initializing with default value
var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop"]
print(favoriteGenres.count)
print(favoriteGenres)

// Accessing and Modifying a Set

if favoriteGenres.isEmpty {
    print("As far as music goes, I'm not picky.")
} else {
    print("I have particular music preferences.")
}

favoriteGenres.insert("Jazz")

print(favoriteGenres)

if let removedGenre = favoriteGenres.remove("Rock2") {
    print("\(removedGenre)? I'm over it.")
} else {
    print("I never much cared for that.")
}

print(favoriteGenres)

if favoriteGenres.contains("Jazz") {
    print("I get up on the good foot.")
} else {
    print("It's too funky in here.")
}

for genre in favoriteGenres {
    print("\(genre)")
}

// Performing Set Operations

let a: Set<Int> = [1, 2, 3]
let b: Set<Int> = [3, 4, 5]

print(a.intersection(b))
print(a.symmetricDifference(b))
print(a.union(b))
print(a.subtracting(b))

// 3. Dictionaries

// Creating an Empty Dictionary
var namesOfIntegers: [Int: String] = [:]
namesOfIntegers[16] = "sixteen"
print(namesOfIntegers)

// Creating a Dictionary with a Dictionary Literal
var airports: [String: String] = ["YYZ": "Toronto Pearson"]
print(airports)
// Accessing and Modifying a Dictionary
print("The airports dictionary contains \(airports.count) items.")

if airports.isEmpty {
    print("The airports dictionary is empty.")
} else {
    print("The airports dictionary isn't empty.")
}

airports["LHR"] = "London"
print(airports)
airports["LHR"] = "London Heathrow"
print(airports)

if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
    print("The old value for DUB was \(oldValue).")
}

print(airports)

if let airportName = airports["DUB"] {
    print("The name of the airport is \(airportName).")
} else {
    print("That airport isn't in the airports dictionary.")
}

airports["APL"] = "Apple International"
print(airports)
// "Apple International" isn't the real airport for APL, so delete it
airports["APL"] = nil
print(airports)
// APL has now been removed from the dictionary

if let removedValue = airports.removeValue(forKey: "DUB") {
    print("The removed airport's name is \(removedValue).")
} else {
    print("The airports dictionary doesn't contain a value for DUB.")
}
print(airports)

// Iterating Over a Dictionary
for (key, value) in airports {
    print("\(key): \(value)")
}

for airportCode in airports.keys {
    print("Airport code: \(airportCode)")
}


for airportName in airports.values {
    print("Airport name: \(airportName)")
}

//print(type(of: airports.keys))
let airportCodes = [String](airports.keys)
print(type(of: airportCodes))
